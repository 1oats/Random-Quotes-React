{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS_ARRAY","quoteAPI","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArray","setQuotesArray","colorAccent","setColorAccent","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","id","color","href","encodeURI","target","icon","faTwitter","onClick","randomInteger","Math","floor","length","random","getRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAWeA,G,MAXM,CAAC,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,uBCHxCC,EAAW,yIAwDAC,MAtDf,WACE,MAA0BC,mBAAS,mGAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,wBAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,mBAAS,GAAjD,mBAAqBK,GAArB,WACA,EAAsCL,mBAAS,MAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAsCP,mBAAS,MAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAeS,EAAWC,QAC1BC,QAAQC,IAAIH,GAJM,2CAAH,sDAuBjB,OAhBAI,qBAAU,WACRV,EAAYZ,KACX,CAACA,IAeF,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAiBf,GAAxD,SACE,sBAAKgB,GAAG,YAAYF,MAAO,CAACG,MAAOjB,GAAnC,UACA,mBAAGgB,GAAG,OAAN,SACGvB,IAEH,oBAAGuB,GAAG,SAAN,eAAkBrB,KAClB,sBAAKkB,UAAU,SAAf,UACA,mBAAGG,GAAG,cAAcF,MAAO,CAACC,gBAAiBf,GAC7CkB,KAAMC,UAAU,wCAAD,OAAyC1B,EAAzC,aAAmDE,IAAWyB,OAAO,SADpF,SAEE,cAAC,IAAD,CAAiBC,KAAMC,QAGzB,wBAAQN,GAAG,YAAYF,MAAO,CAACC,gBAAiBf,GAChDuB,QAAS,kBA3BQ,WACrB,IAAIC,EAAgBC,KAAKC,MAAMrC,EAAasC,OAASF,KAAKG,UAC1D/B,EAAgB2B,GAChBvB,EAAeZ,EAAamC,IAC5B9B,EAASI,EAAY0B,GAAe/B,OACpCG,EAAUE,EAAY0B,GAAe7B,QAsBpBkC,IADb,mCCxCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5af74813.chunk.js","sourcesContent":["const COLORS_ARRAY = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \n'#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n'#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \n'#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n'#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \n'#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n'#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \n'#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n'#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \n'#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n\nexport default COLORS_ARRAY","import React, {useEffect, useState} from 'react';\nimport './App.scss';\nimport COLORS_ARRAY from \"./colorsArray\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nlet quoteAPI = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nfunction App() {\n  const [quote, setQuote] = useState(\"Life is not the number breaths you take, it's the number of moments that take your breath away.\")\n  const [author, setAuthor] = useState(\"Someone from a movie\")\n  const [randomNumber, setRandomNumber] = useState(0)\n  const [quotesArray, setQuotesArray] = useState(null)\n  const [colorAccent, setColorAccent] = useState(null)\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url)\n    const parsedJSON = await response.json()\n    setQuotesArray(parsedJSON.quotes)\n    console.log(parsedJSON)\n  }\n\n  useEffect(() => {\n    fetchQuotes(quoteAPI)\n  }, [quoteAPI])\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(COLORS_ARRAY.length * Math.random())\n    setRandomNumber(randomInteger)\n    setColorAccent(COLORS_ARRAY[randomInteger])\n    setQuote(quotesArray[randomInteger].quote)\n    setAuthor(quotesArray[randomInteger].author)\n  }\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor: colorAccent}}>\n        <div id=\"quote-box\" style={{color: colorAccent}}>\n        <p id=\"text\">\n          {quote}\n        </p>\n        <p id=\"author\">- {author}</p>\n        <div className=\"button\">\n        <a id=\"tweet-quote\" style={{backgroundColor: colorAccent}} \n        href={encodeURI(`http://twitter.com/intent/tweet?text=${quote} -${author}`)} target=\"_blank\">\n          <FontAwesomeIcon icon={faTwitter} />\n          </a>\n        \n        <button id=\"new-quote\" style={{backgroundColor: colorAccent}} \n        onClick={()=>getRandomQuote()}>\n          Next Quote</button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}